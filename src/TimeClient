#include<muduo/net/EventLoop.h>
#include <muduo/net/TcpServer.h>
#include <muduo/base/AsyncLogging.h>
#include <muduo/base/Logging.h>
using namespace muduo;
using namespace muduo::net;
class TimeClient::boost::noncopyable
{
public:
    TimeClient(EventLoop*loop,const InetAddress&serverAddr)
        :loop_(loop),client_(loop,InetAddress,"TimeClient")
        {
            client_.setConnectionCallback(
            boost::bind(&TimeClient::onConnection,this,_1));
            client_.setMessageCallback(
            boost::bind(&TimeClient::onmessage,this,_1,_2,_3));
        }

    void connect()
    {
        client_.connect();
    }

private:
        EventLoop*loop_;
        TcpClient client_;

    void onConnection(const TcpConnectionPtr&conn)
    {
        LOG_INFO<<conn->localAddress().toIpPort()<<"->"
            <<conn->peerAddress().toIpPort()<<"is"
            <<(conn->connected()?"UP":"DOWN");

        if(!conn->connected())
        {
            loop_->quit();
        }
    }
}

int main()
{
    LOG_INFO<<"pid= "<<getpid();
    if(argc>1)
    {
        EventLoop loop;
        InetAddress serverAddr(argv[1],2037);
        TimeClient timeClient(&loop,serverAddr);
        timeClient.connect();
        loop.loop();
    }
    else
    {
        printf("Usage:%s host_ip\n",argv[0]);
    }
}
